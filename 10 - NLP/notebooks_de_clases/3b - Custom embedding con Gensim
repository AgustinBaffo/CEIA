{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"3b - Custom embedding con Gensim","provenance":[{"file_id":"1_oq_QiUQrEXYdA_1uM7zwOINSUGM1h_u","timestamp":1648472750296},{"file_id":"1izqGTp_6uFCtjlyXS_p9HTXm-m9t9T10","timestamp":1605372743977}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"sZd5yLnnHOK0"},"source":["<img src=\"https://github.com/hernancontigiani/ceia_memorias_especializacion/raw/master/Figures/logoFIUBA.jpg\" width=\"500\" align=\"center\">\n","\n","\n","# Procesamiento de lenguaje natural\n","## Custom embedddings con Gensim\n","\n"]},{"cell_type":"markdown","metadata":{"id":"vA7nqkumo9z9"},"source":["### Objetivo\n","El objetivo es utilizar documentos / corpus para crear embeddings de palabras basado en ese contexto. Se utilizará canciones de bandas para generar los embeddings, es decir, que los vectores tendrán la forma en función de como esa banda haya utilizado las palabras en sus canciones."]},{"cell_type":"code","metadata":{"id":"lFToQs5FK5uZ"},"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","import multiprocessing\n","from gensim.models import Word2Vec"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"g07zJxG7H9vG"},"source":["### Datos\n","Utilizaremos como dataset canciones de bandas de habla inglés."]},{"cell_type":"code","metadata":{"id":"l7z4CSBfpR3X"},"source":["# Descargar la carpeta de dataset\n","import os\n","import platform\n","if os.access('./songs_dataset', os.F_OK) is False:\n","    if os.access('songs_dataset.zip', os.F_OK) is False:\n","        if platform.system() == 'Windows':\n","            !curl https://raw.githubusercontent.com/FIUBA-Posgrado-Inteligencia-Artificial/procesamiento_lenguaje_natural/main/datasets/songs_dataset.zip -o songs_dataset.zip\n","        else:\n","            !wget songs_dataset.zip https://github.com/FIUBA-Posgrado-Inteligencia-Artificial/procesamiento_lenguaje_natural/raw/main/datasets/songs_dataset.zip\n","    !unzip -q songs_dataset.zip   \n","else:\n","    print(\"El dataset ya se encuentra descargado\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mysGrIw9ljC2"},"source":["# Posibles bandas\n","os.listdir(\"./songs_dataset/\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ticoqYD1Z3I7"},"source":["# Armar el dataset utilizando salto de línea para separar las oraciones/docs\n","df = pd.read_csv('songs_dataset/beatles.txt', sep='/n', header=None)\n","df.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LEpKubK9XzXN"},"source":["print(\"Cantidad de documentos:\", df.shape[0])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ab94qaFlrA1G"},"source":["### 1 - Preprocesamiento"]},{"cell_type":"code","metadata":{"id":"rIsmMWmjrDHd"},"source":["from keras.preprocessing.text import text_to_word_sequence\n","\n","sentence_tokens = []\n","# Recorrer todas las filas y transformar las oraciones\n","# en una secuencia de palabras (esto podría realizarse con NLTK o spaCy también)\n","for _, row in df[:None].iterrows():\n","    sentence_tokens.append(text_to_word_sequence(row[0]))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CHepi_DGrbhq"},"source":["# Demos un vistazo\n","sentence_tokens[:2]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BaXV6nlHr5Aa"},"source":["### 2 - Crear los vectores (word2vec)"]},{"cell_type":"code","metadata":{"id":"OSb0v7h8r7hK"},"source":["from gensim.models.callbacks import CallbackAny2Vec\n","# Durante el entrenamiento gensim por defecto no informa el \"loss\" en cada época\n","# Sobracargamos el callback para poder tener esta información\n","class callback(CallbackAny2Vec):\n","    \"\"\"\n","    Callback to print loss after each epoch\n","    \"\"\"\n","    def __init__(self):\n","        self.epoch = 0\n","\n","    def on_epoch_end(self, model):\n","        loss = model.get_latest_training_loss()\n","        if self.epoch == 0:\n","            print('Loss after epoch {}: {}'.format(self.epoch, loss))\n","        else:\n","            print('Loss after epoch {}: {}'.format(self.epoch, loss- self.loss_previous_step))\n","        self.epoch += 1\n","        self.loss_previous_step = loss"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"i0wnDdv9sJ47"},"source":["# Crearmos el modelo generador de vectoeres\n","# En este caso utilizaremos la estructura modelo Skipgram\n","w2v_model = Word2Vec(min_count=5,    # frecuencia mínima de palabra para incluirla en el vocabulario\n","                     window=2,       # cant de palabras antes y desp de la predicha\n","                     size=300,       # dimensionalidad de los vectores \n","                     negative=20,    # cantidad de negative samples... 0 es no se usa\n","                     workers=1,      # si tienen más cores pueden cambiar este valor\n","                     sg=1)           # modelo 0:CBOW  1:skipgram"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5lTt8wErsf17"},"source":["# Buildear el vocabularui con los tokens\n","w2v_model.build_vocab(sentence_tokens)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TNc9qt4os5AT"},"source":["# Cantidad de filas/docs encontradas en el corpus\n","print(\"Cantidad de docs en el corpus:\", w2v_model.corpus_count)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"idw9cHF3tSMl"},"source":["# Cantidad de words encontradas en el corpus\n","print(\"Cantidad de words distintas en el corpus:\", len(w2v_model.wv.vocab))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fC9mZ8DPk-UC"},"source":["### 3 - Entrenar el modelo generador"]},{"cell_type":"code","metadata":{"id":"QSp-x0PAsq56"},"source":["# Entrenamos el modelo generador de vectores\n","# Utilizamos nuestro callback\n","w2v_model.train(sentence_tokens,\n","                 total_examples=w2v_model.corpus_count,\n","                 epochs=20,\n","                 compute_loss = True,\n","                 callbacks=[callback()]\n","                 )"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ddT9NVuNlCAe"},"source":["### 4 - Ensayar"]},{"cell_type":"code","metadata":{"id":"6cHN9xGLuPEm"},"source":["# Palabras que MÁS se relacionan con...:\n","w2v_model.wv.most_similar(positive=[\"darling\"], topn=10)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"47HiU5gdkdMq"},"source":["# Palabras que MENOS se relacionan con...:\n","w2v_model.wv.most_similar(negative=[\"love\"], topn=10)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DT4Rvno2mD65"},"source":["# Palabras que MÁS se relacionan con...:\n","w2v_model.wv.most_similar(positive=[\"four\"], topn=10)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"XPLDPgzBmQXt"},"source":["# Palabras que MÁS se relacionan con...:\n","w2v_model.wv.most_similar(positive=[\"money\"], topn=5)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"L_UvHPMMklOr"},"source":["# Ensayar con una palabra que no está en el corpus (en vocab):\n","w2v_model.wv.most_similar(negative=[\"diedaa\"])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_g8UVWe6lFmh"},"source":["### 5 - Visualizar agrupación de vectores"]},{"cell_type":"code","metadata":{"id":"pDxEVXAivjr9"},"source":["from sklearn.decomposition import IncrementalPCA    \n","from sklearn.manifold import TSNE                   \n","import numpy as np                                  \n","\n","def reduce_dimensions(model):\n","    num_dimensions = 2  \n","\n","    vectors = np.asarray(model.wv.vectors)\n","    labels = np.asarray(model.wv.index2word)  \n","\n","    tsne = TSNE(n_components=num_dimensions, random_state=0)\n","    vectors = tsne.fit_transform(vectors)\n","\n","    x_vals = [v[0] for v in vectors]\n","    y_vals = [v[1] for v in vectors]\n","    return x_vals, y_vals, labels"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NCCXtDpcugmd"},"source":["# Graficar los embedddings en 2D\n","import plotly.graph_objects as go\n","import plotly.express as px\n","\n","x_vals, y_vals, labels = reduce_dimensions(w2v_model)\n","\n","MAX_WORDS=200\n","fig = px.scatter(x=x_vals[:MAX_WORDS], y=y_vals[:MAX_WORDS], text=labels[:MAX_WORDS])\n","fig.show(renderer=\"colab\") # esto para plotly en colab"],"execution_count":null,"outputs":[]}]}